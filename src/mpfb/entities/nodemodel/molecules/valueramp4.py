from mpfb.services.logservice import LogService
from .molecule import Molecule

import bpy

_LOG = LogService.get_logger("nodemodel.valueramp4")
_GROUP_NAME = "MpfbValueRamp4"

class MpfbValueRamp4(Molecule):
    def __init__(self):
        _LOG.trace("Constructing Molecule for", _GROUP_NAME)
        Molecule.__init__(self, _GROUP_NAME)

    def create_group(self):
        _LOG.debug("Create group in " + _GROUP_NAME)

        nodes = dict()

        (nodes["Group Input"], nodes["Group Output"]) = self.create_input_and_output()
        nodes["Group Output"].location = [1252.9827880859375, 49.12091064453125]
        nodes["Group Input"].location = [-1205.7359619140625, -213.122314453125]

        self.add_input_socket("Value", socket_type="NodeSocketFloat", default_value=1.000)
        self.add_input_socket("ZeroStopValue", socket_type="NodeSocketFloat", default_value=0.900)
        self.add_input_socket("BetweenStop1Value", socket_type="NodeSocketFloat", default_value=0.000)
        self.add_input_socket("BetweenStop2Value", socket_type="NodeSocketFloat", default_value=1.000)
        self.add_input_socket("BetweenStop3Value", socket_type="NodeSocketFloat", default_value=0.000)
        self.add_input_socket("OneStopValue", socket_type="NodeSocketFloat", default_value=1.000)
        self.add_input_socket("BetweenStop1Position", socket_type="NodeSocketFloat", default_value=0.250)
        self.add_input_socket("BetweenStop2Position", socket_type="NodeSocketFloat", default_value=0.500)
        self.add_input_socket("BetweenStop3Position", socket_type="NodeSocketFloat", default_value=0.750)

        self.add_output_socket("Value", socket_type="NodeSocketFloat", default_value=0.0)

        nodes["Map Range"] = self.createShaderNodeMapRange(name="Map Range", x=-599.264, y=747.069, Value=1.000, From_Min=0.000, From_Max=1.000, To_Min=0.000, To_Max=1.000, Steps=4.000, Vector=[0.0, 0.0, 0.0], From_Min_FLOAT3=[0.0, 0.0, 0.0], From_Max_FLOAT3=[1.0, 1.0, 1.0], To_Min_FLOAT3=[0.0, 0.0, 0.0], To_Max_FLOAT3=[1.0, 1.0, 1.0], Steps_FLOAT3=[4.0, 4.0, 4.0], clamp=True, data_type='FLOAT', interpolation_type='LINEAR')
        nodes["Math.003"] = self.createShaderNodeMath(name="Math.003", x=113.891, y=314.191, Value=0.500, Value_001=0.500, Value_002=0.500, operation='LESS_THAN', use_clamp=False)
        nodes["Math"] = self.createShaderNodeMath(name="Math", x=-274.094, y=795.858, Value=1.000, Value_001=0.500, Value_002=0.500, operation='SUBTRACT', use_clamp=False)
        nodes["Math.001"] = self.createShaderNodeMath(name="Math.001", x=-87.121, y=615.953, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.002"] = self.createShaderNodeMath(name="Math.002", x=-88.290, y=441.009, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.004"] = self.createShaderNodeMath(name="Math.004", x=112.572, y=516.639, Value=0.500, Value_001=0.500, Value_002=0.500, operation='ADD', use_clamp=True)
        nodes["Math.005"] = self.createShaderNodeMath(name="Math.005", x=363.944, y=418.687, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.017"] = self.createShaderNodeMath(name="Math.017", x=148.564, y=-1319.624, Value=0.500, Value_001=0.500, Value_002=0.500, operation='ADD', use_clamp=True)
        nodes["Math.015"] = self.createShaderNodeMath(name="Math.015", x=-44.075, y=-1276.757, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.016"] = self.createShaderNodeMath(name="Math.016", x=-50.282, y=-1457.749, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Map Range.001"] = self.createShaderNodeMapRange(name="Map Range.001", x=-746.566, y=-238.300, Value=1.000, From_Min=0.000, From_Max=1.000, To_Min=0.000, To_Max=1.000, Steps=4.000, Vector=[0.0, 0.0, 0.0], From_Min_FLOAT3=[0.0, 0.0, 0.0], From_Max_FLOAT3=[1.0, 1.0, 1.0], To_Min_FLOAT3=[0.0, 0.0, 0.0], To_Max_FLOAT3=[1.0, 1.0, 1.0], Steps_FLOAT3=[4.0, 4.0, 4.0], clamp=True, data_type='FLOAT', interpolation_type='LINEAR')
        nodes["Math.007"] = self.createShaderNodeMath(name="Math.007", x=-498.670, y=-346.014, Value=1.000, Value_001=0.500, Value_002=0.500, operation='SUBTRACT', use_clamp=False)
        nodes["Math.009"] = self.createShaderNodeMath(name="Math.009", x=-214.639, y=-345.106, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.008"] = self.createShaderNodeMath(name="Math.008", x=-269.020, y=-124.953, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.011"] = self.createShaderNodeMath(name="Math.011", x=-40.028, y=-206.981, Value=0.500, Value_001=0.500, Value_002=0.500, operation='ADD', use_clamp=True)
        nodes["Math.012"] = self.createShaderNodeMath(name="Math.012", x=159.648, y=-64.649, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.020"] = self.createShaderNodeMath(name="Math.020", x=346.075, y=41.645, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Map Range.003"] = self.createShaderNodeMapRange(name="Map Range.003", x=-685.433, y=-894.859, Value=1.000, From_Min=0.000, From_Max=1.000, To_Min=0.000, To_Max=1.000, Steps=4.000, Vector=[0.0, 0.0, 0.0], From_Min_FLOAT3=[0.0, 0.0, 0.0], From_Max_FLOAT3=[1.0, 1.0, 1.0], To_Min_FLOAT3=[0.0, 0.0, 0.0], To_Max_FLOAT3=[1.0, 1.0, 1.0], Steps_FLOAT3=[4.0, 4.0, 4.0], clamp=True, data_type='FLOAT', interpolation_type='LINEAR')
        nodes["Math.022"] = self.createShaderNodeMath(name="Math.022", x=-437.537, y=-1002.573, Value=1.000, Value_001=0.500, Value_002=0.500, operation='SUBTRACT', use_clamp=False)
        nodes["Math.023"] = self.createShaderNodeMath(name="Math.023", x=-153.506, y=-1001.665, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.024"] = self.createShaderNodeMath(name="Math.024", x=-207.887, y=-781.512, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.025"] = self.createShaderNodeMath(name="Math.025", x=-206.569, y=-585.937, Value=0.500, Value_001=0.500, Value_002=0.500, operation='GREATER_THAN', use_clamp=False)
        nodes["Math.026"] = self.createShaderNodeMath(name="Math.026", x=21.104, y=-863.539, Value=0.500, Value_001=0.500, Value_002=0.500, operation='ADD', use_clamp=True)
        nodes["Math.027"] = self.createShaderNodeMath(name="Math.027", x=220.780, y=-721.208, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.029"] = self.createShaderNodeMath(name="Math.029", x=407.208, y=-614.914, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.010"] = self.createShaderNodeMath(name="Math.010", x=-265.522, y=68.442, Value=0.500, Value_001=0.500, Value_002=0.500, operation='GREATER_THAN', use_clamp=False)
        nodes["Math.019"] = self.createShaderNodeMath(name="Math.019", x=148.003, y=109.208, Value=0.500, Value_001=0.500, Value_002=0.500, operation='LESS_THAN', use_clamp=False)
        nodes["Math.028"] = self.createShaderNodeMath(name="Math.028", x=206.957, y=-545.171, Value=0.500, Value_001=0.500, Value_002=0.500, operation='LESS_THAN', use_clamp=False)
        nodes["Math.021"] = self.createShaderNodeMath(name="Math.021", x=890.057, y=18.051, Value=0.500, Value_001=0.500, Value_002=0.500, operation='ADD', use_clamp=False)
        nodes["Math.006"] = self.createShaderNodeMath(name="Math.006", x=635.667, y=283.466, Value=0.500, Value_001=0.000, Value_002=0.500, operation='ADD', use_clamp=True)
        nodes["Math.030"] = self.createShaderNodeMath(name="Math.030", x=685.781, y=-531.662, Value=0.500, Value_001=0.000, Value_002=0.500, operation='ADD', use_clamp=True)
        nodes["Math.018"] = self.createShaderNodeMath(name="Math.018", x=381.797, y=-1209.927, Value=0.500, Value_001=0.500, Value_002=0.500, operation='MULTIPLY', use_clamp=False)
        nodes["Math.013"] = self.createShaderNodeMath(name="Math.013", x=148.332, y=-1107.290, Value=0.500, Value_001=0.500, Value_002=0.500, operation='GREATER_THAN', use_clamp=False)
        nodes["Map Range.002"] = self.createShaderNodeMapRange(name="Map Range.002", x=-802.989, y=-1386.667, Value=1.000, From_Min=0.000, From_Max=1.000, To_Min=0.000, To_Max=1.000, Steps=4.000, Vector=[0.0, 0.0, 0.0], From_Min_FLOAT3=[0.0, 0.0, 0.0], From_Max_FLOAT3=[1.0, 1.0, 1.0], To_Min_FLOAT3=[0.0, 0.0, 0.0], To_Max_FLOAT3=[1.0, 1.0, 1.0], Steps_FLOAT3=[4.0, 4.0, 4.0], clamp=True, data_type='FLOAT', interpolation_type='LINEAR')
        nodes["Math.014"] = self.createShaderNodeMath(name="Math.014", x=-458.522, y=-1578.918, Value=1.000, Value_001=0.500, Value_002=0.500, operation='SUBTRACT', use_clamp=False)

        self.add_link(nodes["Group Input"], "Value", nodes["Map Range"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop1Position", nodes["Map Range"], "From Max")
        self.add_link(nodes["Group Input"], "BetweenStop1Position", nodes["Map Range.001"], "From Min")
        self.add_link(nodes["Group Input"], "Value", nodes["Map Range.001"], "Value")
        self.add_link(nodes["Map Range"], "Result", nodes["Math"], "Value_001")
        self.add_link(nodes["Group Input"], "ZeroStopValue", nodes["Math.001"], "Value_001")
        self.add_link(nodes["Math"], "Value", nodes["Math.001"], "Value")
        self.add_link(nodes["Map Range"], "Result", nodes["Math.002"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop1Value", nodes["Math.002"], "Value_001")
        self.add_link(nodes["Group Input"], "Value", nodes["Math.003"], "Value")
        self.add_link(nodes["Math.001"], "Value", nodes["Math.004"], "Value")
        self.add_link(nodes["Math.002"], "Value", nodes["Math.004"], "Value_001")
        self.add_link(nodes["Math.004"], "Value", nodes["Math.005"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop1Position", nodes["Math.003"], "Value_001")
        self.add_link(nodes["Math.003"], "Value", nodes["Math.005"], "Value_001")
        self.add_link(nodes["Map Range.001"], "Result", nodes["Math.007"], "Value_001")
        self.add_link(nodes["Math.007"], "Value", nodes["Math.008"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop1Value", nodes["Math.008"], "Value_001")
        self.add_link(nodes["Map Range.001"], "Result", nodes["Math.009"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop1Position", nodes["Math.010"], "Value_001")
        self.add_link(nodes["Group Input"], "Value", nodes["Math.010"], "Value")
        self.add_link(nodes["Math.008"], "Value", nodes["Math.011"], "Value")
        self.add_link(nodes["Math.009"], "Value", nodes["Math.011"], "Value_001")
        self.add_link(nodes["Math.010"], "Value", nodes["Math.012"], "Value")
        self.add_link(nodes["Math.011"], "Value", nodes["Math.012"], "Value_001")
        self.add_link(nodes["Map Range.002"], "Result", nodes["Math.014"], "Value_001")
        self.add_link(nodes["Math.014"], "Value", nodes["Math.015"], "Value")
        self.add_link(nodes["Map Range.002"], "Result", nodes["Math.016"], "Value_001")
        self.add_link(nodes["Math.015"], "Value", nodes["Math.017"], "Value")
        self.add_link(nodes["Math.016"], "Value", nodes["Math.017"], "Value_001")
        self.add_link(nodes["Math.013"], "Value", nodes["Math.018"], "Value")
        self.add_link(nodes["Math.017"], "Value", nodes["Math.018"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop2Position", nodes["Map Range.001"], "From Max")
        self.add_link(nodes["Group Input"], "BetweenStop2Value", nodes["Math.009"], "Value")
        self.add_link(nodes["Group Input"], "Value", nodes["Map Range.002"], "Value")
        self.add_link(nodes["Group Input"], "Value", nodes["Math.013"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop2Position", nodes["Math.019"], "Value_001")
        self.add_link(nodes["Group Input"], "Value", nodes["Math.019"], "Value")
        self.add_link(nodes["Math.019"], "Value", nodes["Math.020"], "Value")
        self.add_link(nodes["Math.012"], "Value", nodes["Math.020"], "Value_001")
        self.add_link(nodes["Math.006"], "Value", nodes["Math.021"], "Value")
        self.add_link(nodes["Map Range.003"], "Result", nodes["Math.022"], "Value_001")
        self.add_link(nodes["Math.022"], "Value", nodes["Math.024"], "Value")
        self.add_link(nodes["Math.024"], "Value", nodes["Math.026"], "Value")
        self.add_link(nodes["Math.023"], "Value", nodes["Math.026"], "Value_001")
        self.add_link(nodes["Math.025"], "Value", nodes["Math.027"], "Value")
        self.add_link(nodes["Math.026"], "Value", nodes["Math.027"], "Value_001")
        self.add_link(nodes["Math.028"], "Value", nodes["Math.029"], "Value")
        self.add_link(nodes["Math.027"], "Value", nodes["Math.029"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop3Position", nodes["Math.028"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop2Position", nodes["Math.025"], "Value_001")
        self.add_link(nodes["Group Input"], "Value", nodes["Math.028"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop3Position", nodes["Math.013"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop3Value", nodes["Math.023"], "Value")
        self.add_link(nodes["Group Input"], "Value", nodes["Math.025"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop3Value", nodes["Math.023"], "Value_001")
        self.add_link(nodes["Group Input"], "Value", nodes["Map Range.003"], "Value")
        self.add_link(nodes["Group Input"], "BetweenStop2Position", nodes["Map Range.003"], "From Min")
        self.add_link(nodes["Group Input"], "BetweenStop3Position", nodes["Map Range.003"], "From Max")
        self.add_link(nodes["Math.005"], "Value", nodes["Math.006"], "Value")
        self.add_link(nodes["Math.020"], "Value", nodes["Math.006"], "Value_001")
        self.add_link(nodes["Math.029"], "Value", nodes["Math.030"], "Value")
        self.add_link(nodes["Math.018"], "Value", nodes["Math.030"], "Value_001")
        self.add_link(nodes["Math.030"], "Value", nodes["Math.021"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop2Value", nodes["Math.024"], "Value_001")
        self.add_link(nodes["Group Input"], "BetweenStop3Position", nodes["Map Range.002"], "From Min")
        self.add_link(nodes["Group Input"], "BetweenStop3Value", nodes["Math.015"], "Value_001")
        self.add_link(nodes["Group Input"], "OneStopValue", nodes["Math.016"], "Value")
        self.add_link(nodes["Math.021"], "Value", nodes["Group Output"], "Value")



# --- paste this in the MoleculeNodeManager class def
#
#     def createMpfbValueRamp4(self, x=0.0, y=0.0, name=None, label=None, Value=None, ZeroStopValue=None, BetweenStop1Value=None, BetweenStop2Value=None, BetweenStop3Value=None, OneStopValue=None, BetweenStop1Position=None, BetweenStop2Position=None, BetweenStop3Position=None):
#         return self._molecule_singletons["MpfbValueRamp4"].create_instance(self.node_tree, x=x, y=y, name=name, label=label, Value=Value, ZeroStopValue=ZeroStopValue, BetweenStop1Value=BetweenStop1Value, BetweenStop2Value=BetweenStop2Value, BetweenStop3Value=BetweenStop3Value, OneStopValue=OneStopValue, BetweenStop1Position=BetweenStop1Position, BetweenStop2Position=BetweenStop2Position, BetweenStop3Position=BetweenStop3Position)


